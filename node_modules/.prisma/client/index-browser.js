
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.27.0
 * Query Engine version: cdba6ec525e0213cce26f8e4bb23cf556d1479bb
 */
Prisma.prismaVersion = {
  client: "2.27.0",
  engine: "cdba6ec525e0213cce26f8e4bb23cf556d1479bb"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ClientsScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  password: 'password',
  institution: 'institution',
  department: 'department',
  position: 'position',
  name: 'name',
  institutionKey: 'institutionKey',
  dbIP: 'dbIP',
  dbType: 'dbType',
  dbPort: 'dbPort',
  dbID: 'dbID',
  dbPW: 'dbPW'
});

exports.Prisma.ConfigsScalarFieldEnum = makeEnum({
  id: 'id',
  endpoint: 'endpoint',
  data_type: 'data_type',
  client_key: 'client_key',
  password: 'password',
  term: 'term',
  crontab: 'crontab',
  jobname: 'jobname',
  username: 'username',
  action: 'action',
  toggle: 'toggle'
});

exports.Prisma.Config_loggerScalarFieldEnum = makeEnum({
  id: 'id',
  time: 'time',
  status: 'status',
  message: 'message'
});

exports.Prisma.Compare_temporaryScalarFieldEnum = makeEnum({
  id: 'id',
  config: 'config'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  clients: 'clients',
  configs: 'configs',
  config_logger: 'config_logger',
  compare_temporary: 'compare_temporary'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

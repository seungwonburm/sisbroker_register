
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model clients
 */

export type clients = {
  id: number
  email: string
  password: string
  institution: string
  department: string
  position: string
  name: string
  institutionKey: string
  dbIP: string | null
  dbType: string | null
  dbPort: number | null
  dbID: string | null
  dbPW: string | null
}

/**
 * Model configs
 */

export type configs = {
  id: number
  endpoint: string | null
  data_type: string | null
  client_key: number
  password: string | null
  term: string | null
  crontab: string | null
  jobname: string | null
  username: string | null
  action: string | null
  toggle: number | null
}

/**
 * Model config_logger
 */

export type config_logger = {
  id: number
  time: Date
  status: string
  message: string
}

/**
 * Model compare_temporary
 */

export type compare_temporary = {
  id: number
  config: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clients
 * const clients = await prisma.clients.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clients
   * const clients = await prisma.clients.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.$executeRaw``, values will be escaped automatically
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.$executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.$queryRaw``, values will be escaped automatically
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.$queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.clients`: Exposes CRUD operations for the **clients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.clients.findMany()
    * ```
    */
  get clients(): Prisma.clientsDelegate<GlobalReject>;

  /**
   * `prisma.configs`: Exposes CRUD operations for the **configs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Configs
    * const configs = await prisma.configs.findMany()
    * ```
    */
  get configs(): Prisma.configsDelegate<GlobalReject>;

  /**
   * `prisma.config_logger`: Exposes CRUD operations for the **config_logger** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Config_loggers
    * const config_loggers = await prisma.config_logger.findMany()
    * ```
    */
  get config_logger(): Prisma.config_loggerDelegate<GlobalReject>;

  /**
   * `prisma.compare_temporary`: Exposes CRUD operations for the **compare_temporary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compare_temporaries
    * const compare_temporaries = await prisma.compare_temporary.findMany()
    * ```
    */
  get compare_temporary(): Prisma.compare_temporaryDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.27.0
   * Query Engine version: cdba6ec525e0213cce26f8e4bb23cf556d1479bb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    clients: 'clients',
    configs: 'configs',
    config_logger: 'config_logger',
    compare_temporary: 'compare_temporary'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model clients
   */


  export type AggregateClients = {
    _count: ClientsCountAggregateOutputType | null
    count: ClientsCountAggregateOutputType | null
    _avg: ClientsAvgAggregateOutputType | null
    avg: ClientsAvgAggregateOutputType | null
    _sum: ClientsSumAggregateOutputType | null
    sum: ClientsSumAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
    max: ClientsMaxAggregateOutputType | null
  }

  export type ClientsAvgAggregateOutputType = {
    id: number | null
    dbPort: number | null
  }

  export type ClientsSumAggregateOutputType = {
    id: number | null
    dbPort: number | null
  }

  export type ClientsMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    institution: string | null
    department: string | null
    position: string | null
    name: string | null
    institutionKey: string | null
    dbIP: string | null
    dbType: string | null
    dbPort: number | null
    dbID: string | null
    dbPW: string | null
  }

  export type ClientsMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    institution: string | null
    department: string | null
    position: string | null
    name: string | null
    institutionKey: string | null
    dbIP: string | null
    dbType: string | null
    dbPort: number | null
    dbID: string | null
    dbPW: string | null
  }

  export type ClientsCountAggregateOutputType = {
    id: number
    email: number
    password: number
    institution: number
    department: number
    position: number
    name: number
    institutionKey: number
    dbIP: number
    dbType: number
    dbPort: number
    dbID: number
    dbPW: number
    _all: number
  }


  export type ClientsAvgAggregateInputType = {
    id?: true
    dbPort?: true
  }

  export type ClientsSumAggregateInputType = {
    id?: true
    dbPort?: true
  }

  export type ClientsMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    institution?: true
    department?: true
    position?: true
    name?: true
    institutionKey?: true
    dbIP?: true
    dbType?: true
    dbPort?: true
    dbID?: true
    dbPW?: true
  }

  export type ClientsMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    institution?: true
    department?: true
    position?: true
    name?: true
    institutionKey?: true
    dbIP?: true
    dbType?: true
    dbPort?: true
    dbID?: true
    dbPW?: true
  }

  export type ClientsCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    institution?: true
    department?: true
    position?: true
    name?: true
    institutionKey?: true
    dbIP?: true
    dbType?: true
    dbPort?: true
    dbID?: true
    dbPW?: true
    _all?: true
  }

  export type ClientsAggregateArgs = {
    /**
     * Filter which clients to aggregate.
     * 
    **/
    where?: clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     * 
    **/
    orderBy?: Enumerable<clientsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clients
    **/
    _count?: true | ClientsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | ClientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientsAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: ClientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientsSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: ClientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: ClientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: ClientsMaxAggregateInputType
  }

  export type GetClientsAggregateType<T extends ClientsAggregateArgs> = {
        [P in keyof T & keyof AggregateClients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClients[P]>
      : GetScalarType<T[P], AggregateClients[P]>
  }


    
    
  export type ClientsGroupByArgs = {
    where?: clientsWhereInput
    orderBy?: Enumerable<clientsOrderByInput>
    by: Array<ClientsScalarFieldEnum>
    having?: clientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientsCountAggregateInputType | true
    _avg?: ClientsAvgAggregateInputType
    _sum?: ClientsSumAggregateInputType
    _min?: ClientsMinAggregateInputType
    _max?: ClientsMaxAggregateInputType
  }


  export type ClientsGroupByOutputType = {
    id: number
    email: string
    password: string
    institution: string
    department: string
    position: string
    name: string
    institutionKey: string
    dbIP: string | null
    dbType: string | null
    dbPort: number | null
    dbID: string | null
    dbPW: string | null
    _count: ClientsCountAggregateOutputType | null
    _avg: ClientsAvgAggregateOutputType | null
    _sum: ClientsSumAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
  }

  type GetClientsGroupByPayload<T extends ClientsGroupByArgs> = Promise<
    Array<
      PickArray<ClientsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof ClientsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], ClientsGroupByOutputType[P]> 
            : GetScalarType<T[P], ClientsGroupByOutputType[P]>
        }
      > 
    >


  export type clientsSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    institution?: boolean
    department?: boolean
    position?: boolean
    name?: boolean
    institutionKey?: boolean
    dbIP?: boolean
    dbType?: boolean
    dbPort?: boolean
    dbID?: boolean
    dbPW?: boolean
    configs?: boolean | configsFindManyArgs
  }

  export type clientsInclude = {
    configs?: boolean | configsFindManyArgs
  }

  export type clientsGetPayload<
    S extends boolean | null | undefined | clientsArgs,
    U = keyof S
      > = S extends true
        ? clients
    : S extends undefined
    ? never
    : S extends clientsArgs | clientsFindManyArgs
    ?'include' extends U
    ? clients  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'configs'
        ? Array < configsGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof clients ?clients [P]
  : 
          P extends 'configs'
        ? Array < configsGetPayload<S['select'][P]>>  : never
  } 
    : clients
  : clients


  type clientsCountArgs = Merge<
    Omit<clientsFindManyArgs, 'select' | 'include'> & {
      select?: ClientsCountAggregateInputType | true
    }
  >

  export interface clientsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Clients that matches the filter.
     * @param {clientsFindUniqueArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends clientsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, clientsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'clients'> extends True ? CheckSelect<T, Prisma__clientsClient<clients>, Prisma__clientsClient<clientsGetPayload<T>>> : CheckSelect<T, Prisma__clientsClient<clients | null >, Prisma__clientsClient<clientsGetPayload<T> | null >>

    /**
     * Find the first Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsFindFirstArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends clientsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, clientsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'clients'> extends True ? CheckSelect<T, Prisma__clientsClient<clients>, Prisma__clientsClient<clientsGetPayload<T>>> : CheckSelect<T, Prisma__clientsClient<clients | null >, Prisma__clientsClient<clientsGetPayload<T> | null >>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.clients.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.clients.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientsWithIdOnly = await prisma.clients.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends clientsFindManyArgs>(
      args?: SelectSubset<T, clientsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<clients>>, PrismaPromise<Array<clientsGetPayload<T>>>>

    /**
     * Create a Clients.
     * @param {clientsCreateArgs} args - Arguments to create a Clients.
     * @example
     * // Create one Clients
     * const Clients = await prisma.clients.create({
     *   data: {
     *     // ... data to create a Clients
     *   }
     * })
     * 
    **/
    create<T extends clientsCreateArgs>(
      args: SelectSubset<T, clientsCreateArgs>
    ): CheckSelect<T, Prisma__clientsClient<clients>, Prisma__clientsClient<clientsGetPayload<T>>>

    /**
     * Create many Clients.
     *     @param {clientsCreateManyArgs} args - Arguments to create many Clients.
     *     @example
     *     // Create many Clients
     *     const clients = await prisma.clients.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends clientsCreateManyArgs>(
      args?: SelectSubset<T, clientsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Clients.
     * @param {clientsDeleteArgs} args - Arguments to delete one Clients.
     * @example
     * // Delete one Clients
     * const Clients = await prisma.clients.delete({
     *   where: {
     *     // ... filter to delete one Clients
     *   }
     * })
     * 
    **/
    delete<T extends clientsDeleteArgs>(
      args: SelectSubset<T, clientsDeleteArgs>
    ): CheckSelect<T, Prisma__clientsClient<clients>, Prisma__clientsClient<clientsGetPayload<T>>>

    /**
     * Update one Clients.
     * @param {clientsUpdateArgs} args - Arguments to update one Clients.
     * @example
     * // Update one Clients
     * const clients = await prisma.clients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends clientsUpdateArgs>(
      args: SelectSubset<T, clientsUpdateArgs>
    ): CheckSelect<T, Prisma__clientsClient<clients>, Prisma__clientsClient<clientsGetPayload<T>>>

    /**
     * Delete zero or more Clients.
     * @param {clientsDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.clients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends clientsDeleteManyArgs>(
      args?: SelectSubset<T, clientsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const clients = await prisma.clients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends clientsUpdateManyArgs>(
      args: SelectSubset<T, clientsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Clients.
     * @param {clientsUpsertArgs} args - Arguments to update or create a Clients.
     * @example
     * // Update or create a Clients
     * const clients = await prisma.clients.upsert({
     *   create: {
     *     // ... data to create a Clients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clients we want to update
     *   }
     * })
    **/
    upsert<T extends clientsUpsertArgs>(
      args: SelectSubset<T, clientsUpsertArgs>
    ): CheckSelect<T, Prisma__clientsClient<clients>, Prisma__clientsClient<clientsGetPayload<T>>>

    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.clients.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends clientsCountArgs>(
      args?: Subset<T, clientsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientsAggregateArgs>(args: Subset<T, ClientsAggregateArgs>): PrismaPromise<GetClientsAggregateType<T>>

    /**
     * Group by Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientsGroupByArgs['orderBy'] }
        : { orderBy?: ClientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for clients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__clientsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    configs<T extends configsFindManyArgs = {}>(args?: Subset<T, configsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<configs>>, PrismaPromise<Array<configsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * clients findUnique
   */
  export type clientsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the clients
     * 
    **/
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientsInclude | null
    /**
     * Throw an Error if a clients can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which clients to fetch.
     * 
    **/
    where: clientsWhereUniqueInput
  }


  /**
   * clients findFirst
   */
  export type clientsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the clients
     * 
    **/
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientsInclude | null
    /**
     * Throw an Error if a clients can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which clients to fetch.
     * 
    **/
    where?: clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     * 
    **/
    orderBy?: Enumerable<clientsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clients.
     * 
    **/
    cursor?: clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clients.
     * 
    **/
    distinct?: Enumerable<ClientsScalarFieldEnum>
  }


  /**
   * clients findMany
   */
  export type clientsFindManyArgs = {
    /**
     * Select specific fields to fetch from the clients
     * 
    **/
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientsInclude | null
    /**
     * Filter, which clients to fetch.
     * 
    **/
    where?: clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     * 
    **/
    orderBy?: Enumerable<clientsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clients.
     * 
    **/
    cursor?: clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ClientsScalarFieldEnum>
  }


  /**
   * clients create
   */
  export type clientsCreateArgs = {
    /**
     * Select specific fields to fetch from the clients
     * 
    **/
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientsInclude | null
    /**
     * The data needed to create a clients.
     * 
    **/
    data: XOR<clientsCreateInput, clientsUncheckedCreateInput>
  }


  /**
   * clients createMany
   */
  export type clientsCreateManyArgs = {
    data: Enumerable<clientsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * clients update
   */
  export type clientsUpdateArgs = {
    /**
     * Select specific fields to fetch from the clients
     * 
    **/
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientsInclude | null
    /**
     * The data needed to update a clients.
     * 
    **/
    data: XOR<clientsUpdateInput, clientsUncheckedUpdateInput>
    /**
     * Choose, which clients to update.
     * 
    **/
    where: clientsWhereUniqueInput
  }


  /**
   * clients updateMany
   */
  export type clientsUpdateManyArgs = {
    data: XOR<clientsUpdateManyMutationInput, clientsUncheckedUpdateManyInput>
    where?: clientsWhereInput
  }


  /**
   * clients upsert
   */
  export type clientsUpsertArgs = {
    /**
     * Select specific fields to fetch from the clients
     * 
    **/
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientsInclude | null
    /**
     * The filter to search for the clients to update in case it exists.
     * 
    **/
    where: clientsWhereUniqueInput
    /**
     * In case the clients found by the `where` argument doesn't exist, create a new clients with this data.
     * 
    **/
    create: XOR<clientsCreateInput, clientsUncheckedCreateInput>
    /**
     * In case the clients was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<clientsUpdateInput, clientsUncheckedUpdateInput>
  }


  /**
   * clients delete
   */
  export type clientsDeleteArgs = {
    /**
     * Select specific fields to fetch from the clients
     * 
    **/
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientsInclude | null
    /**
     * Filter which clients to delete.
     * 
    **/
    where: clientsWhereUniqueInput
  }


  /**
   * clients deleteMany
   */
  export type clientsDeleteManyArgs = {
    where?: clientsWhereInput
  }


  /**
   * clients without action
   */
  export type clientsArgs = {
    /**
     * Select specific fields to fetch from the clients
     * 
    **/
    select?: clientsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientsInclude | null
  }



  /**
   * Model configs
   */


  export type AggregateConfigs = {
    _count: ConfigsCountAggregateOutputType | null
    count: ConfigsCountAggregateOutputType | null
    _avg: ConfigsAvgAggregateOutputType | null
    avg: ConfigsAvgAggregateOutputType | null
    _sum: ConfigsSumAggregateOutputType | null
    sum: ConfigsSumAggregateOutputType | null
    _min: ConfigsMinAggregateOutputType | null
    min: ConfigsMinAggregateOutputType | null
    _max: ConfigsMaxAggregateOutputType | null
    max: ConfigsMaxAggregateOutputType | null
  }

  export type ConfigsAvgAggregateOutputType = {
    id: number | null
    client_key: number | null
    toggle: number | null
  }

  export type ConfigsSumAggregateOutputType = {
    id: number | null
    client_key: number | null
    toggle: number | null
  }

  export type ConfigsMinAggregateOutputType = {
    id: number | null
    endpoint: string | null
    data_type: string | null
    client_key: number | null
    password: string | null
    term: string | null
    crontab: string | null
    jobname: string | null
    username: string | null
    action: string | null
    toggle: number | null
  }

  export type ConfigsMaxAggregateOutputType = {
    id: number | null
    endpoint: string | null
    data_type: string | null
    client_key: number | null
    password: string | null
    term: string | null
    crontab: string | null
    jobname: string | null
    username: string | null
    action: string | null
    toggle: number | null
  }

  export type ConfigsCountAggregateOutputType = {
    id: number
    endpoint: number
    data_type: number
    client_key: number
    password: number
    term: number
    crontab: number
    jobname: number
    username: number
    action: number
    toggle: number
    _all: number
  }


  export type ConfigsAvgAggregateInputType = {
    id?: true
    client_key?: true
    toggle?: true
  }

  export type ConfigsSumAggregateInputType = {
    id?: true
    client_key?: true
    toggle?: true
  }

  export type ConfigsMinAggregateInputType = {
    id?: true
    endpoint?: true
    data_type?: true
    client_key?: true
    password?: true
    term?: true
    crontab?: true
    jobname?: true
    username?: true
    action?: true
    toggle?: true
  }

  export type ConfigsMaxAggregateInputType = {
    id?: true
    endpoint?: true
    data_type?: true
    client_key?: true
    password?: true
    term?: true
    crontab?: true
    jobname?: true
    username?: true
    action?: true
    toggle?: true
  }

  export type ConfigsCountAggregateInputType = {
    id?: true
    endpoint?: true
    data_type?: true
    client_key?: true
    password?: true
    term?: true
    crontab?: true
    jobname?: true
    username?: true
    action?: true
    toggle?: true
    _all?: true
  }

  export type ConfigsAggregateArgs = {
    /**
     * Filter which configs to aggregate.
     * 
    **/
    where?: configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of configs to fetch.
     * 
    **/
    orderBy?: Enumerable<configsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` configs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` configs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned configs
    **/
    _count?: true | ConfigsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | ConfigsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConfigsAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: ConfigsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConfigsSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: ConfigsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConfigsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: ConfigsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConfigsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: ConfigsMaxAggregateInputType
  }

  export type GetConfigsAggregateType<T extends ConfigsAggregateArgs> = {
        [P in keyof T & keyof AggregateConfigs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConfigs[P]>
      : GetScalarType<T[P], AggregateConfigs[P]>
  }


    
    
  export type ConfigsGroupByArgs = {
    where?: configsWhereInput
    orderBy?: Enumerable<configsOrderByInput>
    by: Array<ConfigsScalarFieldEnum>
    having?: configsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConfigsCountAggregateInputType | true
    _avg?: ConfigsAvgAggregateInputType
    _sum?: ConfigsSumAggregateInputType
    _min?: ConfigsMinAggregateInputType
    _max?: ConfigsMaxAggregateInputType
  }


  export type ConfigsGroupByOutputType = {
    id: number
    endpoint: string | null
    data_type: string | null
    client_key: number
    password: string | null
    term: string | null
    crontab: string | null
    jobname: string | null
    username: string | null
    action: string | null
    toggle: number | null
    _count: ConfigsCountAggregateOutputType | null
    _avg: ConfigsAvgAggregateOutputType | null
    _sum: ConfigsSumAggregateOutputType | null
    _min: ConfigsMinAggregateOutputType | null
    _max: ConfigsMaxAggregateOutputType | null
  }

  type GetConfigsGroupByPayload<T extends ConfigsGroupByArgs> = Promise<
    Array<
      PickArray<ConfigsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof ConfigsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], ConfigsGroupByOutputType[P]> 
            : GetScalarType<T[P], ConfigsGroupByOutputType[P]>
        }
      > 
    >


  export type configsSelect = {
    id?: boolean
    endpoint?: boolean
    data_type?: boolean
    client_key?: boolean
    password?: boolean
    term?: boolean
    crontab?: boolean
    jobname?: boolean
    username?: boolean
    action?: boolean
    toggle?: boolean
    clients?: boolean | clientsArgs
  }

  export type configsInclude = {
    clients?: boolean | clientsArgs
  }

  export type configsGetPayload<
    S extends boolean | null | undefined | configsArgs,
    U = keyof S
      > = S extends true
        ? configs
    : S extends undefined
    ? never
    : S extends configsArgs | configsFindManyArgs
    ?'include' extends U
    ? configs  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'clients'
        ? clientsGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof configs ?configs [P]
  : 
          P extends 'clients'
        ? clientsGetPayload<S['select'][P]> : never
  } 
    : configs
  : configs


  type configsCountArgs = Merge<
    Omit<configsFindManyArgs, 'select' | 'include'> & {
      select?: ConfigsCountAggregateInputType | true
    }
  >

  export interface configsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Configs that matches the filter.
     * @param {configsFindUniqueArgs} args - Arguments to find a Configs
     * @example
     * // Get one Configs
     * const configs = await prisma.configs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends configsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, configsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'configs'> extends True ? CheckSelect<T, Prisma__configsClient<configs>, Prisma__configsClient<configsGetPayload<T>>> : CheckSelect<T, Prisma__configsClient<configs | null >, Prisma__configsClient<configsGetPayload<T> | null >>

    /**
     * Find the first Configs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsFindFirstArgs} args - Arguments to find a Configs
     * @example
     * // Get one Configs
     * const configs = await prisma.configs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends configsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, configsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'configs'> extends True ? CheckSelect<T, Prisma__configsClient<configs>, Prisma__configsClient<configsGetPayload<T>>> : CheckSelect<T, Prisma__configsClient<configs | null >, Prisma__configsClient<configsGetPayload<T> | null >>

    /**
     * Find zero or more Configs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Configs
     * const configs = await prisma.configs.findMany()
     * 
     * // Get first 10 Configs
     * const configs = await prisma.configs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const configsWithIdOnly = await prisma.configs.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends configsFindManyArgs>(
      args?: SelectSubset<T, configsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<configs>>, PrismaPromise<Array<configsGetPayload<T>>>>

    /**
     * Create a Configs.
     * @param {configsCreateArgs} args - Arguments to create a Configs.
     * @example
     * // Create one Configs
     * const Configs = await prisma.configs.create({
     *   data: {
     *     // ... data to create a Configs
     *   }
     * })
     * 
    **/
    create<T extends configsCreateArgs>(
      args: SelectSubset<T, configsCreateArgs>
    ): CheckSelect<T, Prisma__configsClient<configs>, Prisma__configsClient<configsGetPayload<T>>>

    /**
     * Create many Configs.
     *     @param {configsCreateManyArgs} args - Arguments to create many Configs.
     *     @example
     *     // Create many Configs
     *     const configs = await prisma.configs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends configsCreateManyArgs>(
      args?: SelectSubset<T, configsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Configs.
     * @param {configsDeleteArgs} args - Arguments to delete one Configs.
     * @example
     * // Delete one Configs
     * const Configs = await prisma.configs.delete({
     *   where: {
     *     // ... filter to delete one Configs
     *   }
     * })
     * 
    **/
    delete<T extends configsDeleteArgs>(
      args: SelectSubset<T, configsDeleteArgs>
    ): CheckSelect<T, Prisma__configsClient<configs>, Prisma__configsClient<configsGetPayload<T>>>

    /**
     * Update one Configs.
     * @param {configsUpdateArgs} args - Arguments to update one Configs.
     * @example
     * // Update one Configs
     * const configs = await prisma.configs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends configsUpdateArgs>(
      args: SelectSubset<T, configsUpdateArgs>
    ): CheckSelect<T, Prisma__configsClient<configs>, Prisma__configsClient<configsGetPayload<T>>>

    /**
     * Delete zero or more Configs.
     * @param {configsDeleteManyArgs} args - Arguments to filter Configs to delete.
     * @example
     * // Delete a few Configs
     * const { count } = await prisma.configs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends configsDeleteManyArgs>(
      args?: SelectSubset<T, configsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Configs
     * const configs = await prisma.configs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends configsUpdateManyArgs>(
      args: SelectSubset<T, configsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Configs.
     * @param {configsUpsertArgs} args - Arguments to update or create a Configs.
     * @example
     * // Update or create a Configs
     * const configs = await prisma.configs.upsert({
     *   create: {
     *     // ... data to create a Configs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Configs we want to update
     *   }
     * })
    **/
    upsert<T extends configsUpsertArgs>(
      args: SelectSubset<T, configsUpsertArgs>
    ): CheckSelect<T, Prisma__configsClient<configs>, Prisma__configsClient<configsGetPayload<T>>>

    /**
     * Count the number of Configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsCountArgs} args - Arguments to filter Configs to count.
     * @example
     * // Count the number of Configs
     * const count = await prisma.configs.count({
     *   where: {
     *     // ... the filter for the Configs we want to count
     *   }
     * })
    **/
    count<T extends configsCountArgs>(
      args?: Subset<T, configsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConfigsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConfigsAggregateArgs>(args: Subset<T, ConfigsAggregateArgs>): PrismaPromise<GetConfigsAggregateType<T>>

    /**
     * Group by Configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConfigsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConfigsGroupByArgs['orderBy'] }
        : { orderBy?: ConfigsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConfigsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConfigsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for configs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__configsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    clients<T extends clientsArgs = {}>(args?: Subset<T, clientsArgs>): CheckSelect<T, Prisma__clientsClient<clients | null >, Prisma__clientsClient<clientsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * configs findUnique
   */
  export type configsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the configs
     * 
    **/
    select?: configsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: configsInclude | null
    /**
     * Throw an Error if a configs can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which configs to fetch.
     * 
    **/
    where: configsWhereUniqueInput
  }


  /**
   * configs findFirst
   */
  export type configsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the configs
     * 
    **/
    select?: configsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: configsInclude | null
    /**
     * Throw an Error if a configs can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which configs to fetch.
     * 
    **/
    where?: configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of configs to fetch.
     * 
    **/
    orderBy?: Enumerable<configsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for configs.
     * 
    **/
    cursor?: configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` configs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` configs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of configs.
     * 
    **/
    distinct?: Enumerable<ConfigsScalarFieldEnum>
  }


  /**
   * configs findMany
   */
  export type configsFindManyArgs = {
    /**
     * Select specific fields to fetch from the configs
     * 
    **/
    select?: configsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: configsInclude | null
    /**
     * Filter, which configs to fetch.
     * 
    **/
    where?: configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of configs to fetch.
     * 
    **/
    orderBy?: Enumerable<configsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing configs.
     * 
    **/
    cursor?: configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` configs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` configs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ConfigsScalarFieldEnum>
  }


  /**
   * configs create
   */
  export type configsCreateArgs = {
    /**
     * Select specific fields to fetch from the configs
     * 
    **/
    select?: configsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: configsInclude | null
    /**
     * The data needed to create a configs.
     * 
    **/
    data: XOR<configsCreateInput, configsUncheckedCreateInput>
  }


  /**
   * configs createMany
   */
  export type configsCreateManyArgs = {
    data: Enumerable<configsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * configs update
   */
  export type configsUpdateArgs = {
    /**
     * Select specific fields to fetch from the configs
     * 
    **/
    select?: configsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: configsInclude | null
    /**
     * The data needed to update a configs.
     * 
    **/
    data: XOR<configsUpdateInput, configsUncheckedUpdateInput>
    /**
     * Choose, which configs to update.
     * 
    **/
    where: configsWhereUniqueInput
  }


  /**
   * configs updateMany
   */
  export type configsUpdateManyArgs = {
    data: XOR<configsUpdateManyMutationInput, configsUncheckedUpdateManyInput>
    where?: configsWhereInput
  }


  /**
   * configs upsert
   */
  export type configsUpsertArgs = {
    /**
     * Select specific fields to fetch from the configs
     * 
    **/
    select?: configsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: configsInclude | null
    /**
     * The filter to search for the configs to update in case it exists.
     * 
    **/
    where: configsWhereUniqueInput
    /**
     * In case the configs found by the `where` argument doesn't exist, create a new configs with this data.
     * 
    **/
    create: XOR<configsCreateInput, configsUncheckedCreateInput>
    /**
     * In case the configs was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<configsUpdateInput, configsUncheckedUpdateInput>
  }


  /**
   * configs delete
   */
  export type configsDeleteArgs = {
    /**
     * Select specific fields to fetch from the configs
     * 
    **/
    select?: configsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: configsInclude | null
    /**
     * Filter which configs to delete.
     * 
    **/
    where: configsWhereUniqueInput
  }


  /**
   * configs deleteMany
   */
  export type configsDeleteManyArgs = {
    where?: configsWhereInput
  }


  /**
   * configs without action
   */
  export type configsArgs = {
    /**
     * Select specific fields to fetch from the configs
     * 
    **/
    select?: configsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: configsInclude | null
  }



  /**
   * Model config_logger
   */


  export type AggregateConfig_logger = {
    _count: Config_loggerCountAggregateOutputType | null
    count: Config_loggerCountAggregateOutputType | null
    _avg: Config_loggerAvgAggregateOutputType | null
    avg: Config_loggerAvgAggregateOutputType | null
    _sum: Config_loggerSumAggregateOutputType | null
    sum: Config_loggerSumAggregateOutputType | null
    _min: Config_loggerMinAggregateOutputType | null
    min: Config_loggerMinAggregateOutputType | null
    _max: Config_loggerMaxAggregateOutputType | null
    max: Config_loggerMaxAggregateOutputType | null
  }

  export type Config_loggerAvgAggregateOutputType = {
    id: number | null
  }

  export type Config_loggerSumAggregateOutputType = {
    id: number | null
  }

  export type Config_loggerMinAggregateOutputType = {
    id: number | null
    time: Date | null
    status: string | null
    message: string | null
  }

  export type Config_loggerMaxAggregateOutputType = {
    id: number | null
    time: Date | null
    status: string | null
    message: string | null
  }

  export type Config_loggerCountAggregateOutputType = {
    id: number
    time: number
    status: number
    message: number
    _all: number
  }


  export type Config_loggerAvgAggregateInputType = {
    id?: true
  }

  export type Config_loggerSumAggregateInputType = {
    id?: true
  }

  export type Config_loggerMinAggregateInputType = {
    id?: true
    time?: true
    status?: true
    message?: true
  }

  export type Config_loggerMaxAggregateInputType = {
    id?: true
    time?: true
    status?: true
    message?: true
  }

  export type Config_loggerCountAggregateInputType = {
    id?: true
    time?: true
    status?: true
    message?: true
    _all?: true
  }

  export type Config_loggerAggregateArgs = {
    /**
     * Filter which config_logger to aggregate.
     * 
    **/
    where?: config_loggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of config_loggers to fetch.
     * 
    **/
    orderBy?: Enumerable<config_loggerOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: config_loggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` config_loggers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` config_loggers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned config_loggers
    **/
    _count?: true | Config_loggerCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | Config_loggerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Config_loggerAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: Config_loggerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Config_loggerSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: Config_loggerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Config_loggerMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: Config_loggerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Config_loggerMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: Config_loggerMaxAggregateInputType
  }

  export type GetConfig_loggerAggregateType<T extends Config_loggerAggregateArgs> = {
        [P in keyof T & keyof AggregateConfig_logger]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConfig_logger[P]>
      : GetScalarType<T[P], AggregateConfig_logger[P]>
  }


    
    
  export type Config_loggerGroupByArgs = {
    where?: config_loggerWhereInput
    orderBy?: Enumerable<config_loggerOrderByInput>
    by: Array<Config_loggerScalarFieldEnum>
    having?: config_loggerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Config_loggerCountAggregateInputType | true
    _avg?: Config_loggerAvgAggregateInputType
    _sum?: Config_loggerSumAggregateInputType
    _min?: Config_loggerMinAggregateInputType
    _max?: Config_loggerMaxAggregateInputType
  }


  export type Config_loggerGroupByOutputType = {
    id: number
    time: Date
    status: string
    message: string
    _count: Config_loggerCountAggregateOutputType | null
    _avg: Config_loggerAvgAggregateOutputType | null
    _sum: Config_loggerSumAggregateOutputType | null
    _min: Config_loggerMinAggregateOutputType | null
    _max: Config_loggerMaxAggregateOutputType | null
  }

  type GetConfig_loggerGroupByPayload<T extends Config_loggerGroupByArgs> = Promise<
    Array<
      PickArray<Config_loggerGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Config_loggerGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Config_loggerGroupByOutputType[P]> 
            : GetScalarType<T[P], Config_loggerGroupByOutputType[P]>
        }
      > 
    >


  export type config_loggerSelect = {
    id?: boolean
    time?: boolean
    status?: boolean
    message?: boolean
  }

  export type config_loggerGetPayload<
    S extends boolean | null | undefined | config_loggerArgs,
    U = keyof S
      > = S extends true
        ? config_logger
    : S extends undefined
    ? never
    : S extends config_loggerArgs | config_loggerFindManyArgs
    ?'include' extends U
    ? config_logger 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof config_logger ?config_logger [P]
  : 
     never
  } 
    : config_logger
  : config_logger


  type config_loggerCountArgs = Merge<
    Omit<config_loggerFindManyArgs, 'select' | 'include'> & {
      select?: Config_loggerCountAggregateInputType | true
    }
  >

  export interface config_loggerDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Config_logger that matches the filter.
     * @param {config_loggerFindUniqueArgs} args - Arguments to find a Config_logger
     * @example
     * // Get one Config_logger
     * const config_logger = await prisma.config_logger.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends config_loggerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, config_loggerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'config_logger'> extends True ? CheckSelect<T, Prisma__config_loggerClient<config_logger>, Prisma__config_loggerClient<config_loggerGetPayload<T>>> : CheckSelect<T, Prisma__config_loggerClient<config_logger | null >, Prisma__config_loggerClient<config_loggerGetPayload<T> | null >>

    /**
     * Find the first Config_logger that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {config_loggerFindFirstArgs} args - Arguments to find a Config_logger
     * @example
     * // Get one Config_logger
     * const config_logger = await prisma.config_logger.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends config_loggerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, config_loggerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'config_logger'> extends True ? CheckSelect<T, Prisma__config_loggerClient<config_logger>, Prisma__config_loggerClient<config_loggerGetPayload<T>>> : CheckSelect<T, Prisma__config_loggerClient<config_logger | null >, Prisma__config_loggerClient<config_loggerGetPayload<T> | null >>

    /**
     * Find zero or more Config_loggers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {config_loggerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Config_loggers
     * const config_loggers = await prisma.config_logger.findMany()
     * 
     * // Get first 10 Config_loggers
     * const config_loggers = await prisma.config_logger.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const config_loggerWithIdOnly = await prisma.config_logger.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends config_loggerFindManyArgs>(
      args?: SelectSubset<T, config_loggerFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<config_logger>>, PrismaPromise<Array<config_loggerGetPayload<T>>>>

    /**
     * Create a Config_logger.
     * @param {config_loggerCreateArgs} args - Arguments to create a Config_logger.
     * @example
     * // Create one Config_logger
     * const Config_logger = await prisma.config_logger.create({
     *   data: {
     *     // ... data to create a Config_logger
     *   }
     * })
     * 
    **/
    create<T extends config_loggerCreateArgs>(
      args: SelectSubset<T, config_loggerCreateArgs>
    ): CheckSelect<T, Prisma__config_loggerClient<config_logger>, Prisma__config_loggerClient<config_loggerGetPayload<T>>>

    /**
     * Create many Config_loggers.
     *     @param {config_loggerCreateManyArgs} args - Arguments to create many Config_loggers.
     *     @example
     *     // Create many Config_loggers
     *     const config_logger = await prisma.config_logger.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends config_loggerCreateManyArgs>(
      args?: SelectSubset<T, config_loggerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Config_logger.
     * @param {config_loggerDeleteArgs} args - Arguments to delete one Config_logger.
     * @example
     * // Delete one Config_logger
     * const Config_logger = await prisma.config_logger.delete({
     *   where: {
     *     // ... filter to delete one Config_logger
     *   }
     * })
     * 
    **/
    delete<T extends config_loggerDeleteArgs>(
      args: SelectSubset<T, config_loggerDeleteArgs>
    ): CheckSelect<T, Prisma__config_loggerClient<config_logger>, Prisma__config_loggerClient<config_loggerGetPayload<T>>>

    /**
     * Update one Config_logger.
     * @param {config_loggerUpdateArgs} args - Arguments to update one Config_logger.
     * @example
     * // Update one Config_logger
     * const config_logger = await prisma.config_logger.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends config_loggerUpdateArgs>(
      args: SelectSubset<T, config_loggerUpdateArgs>
    ): CheckSelect<T, Prisma__config_loggerClient<config_logger>, Prisma__config_loggerClient<config_loggerGetPayload<T>>>

    /**
     * Delete zero or more Config_loggers.
     * @param {config_loggerDeleteManyArgs} args - Arguments to filter Config_loggers to delete.
     * @example
     * // Delete a few Config_loggers
     * const { count } = await prisma.config_logger.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends config_loggerDeleteManyArgs>(
      args?: SelectSubset<T, config_loggerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Config_loggers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {config_loggerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Config_loggers
     * const config_logger = await prisma.config_logger.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends config_loggerUpdateManyArgs>(
      args: SelectSubset<T, config_loggerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Config_logger.
     * @param {config_loggerUpsertArgs} args - Arguments to update or create a Config_logger.
     * @example
     * // Update or create a Config_logger
     * const config_logger = await prisma.config_logger.upsert({
     *   create: {
     *     // ... data to create a Config_logger
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Config_logger we want to update
     *   }
     * })
    **/
    upsert<T extends config_loggerUpsertArgs>(
      args: SelectSubset<T, config_loggerUpsertArgs>
    ): CheckSelect<T, Prisma__config_loggerClient<config_logger>, Prisma__config_loggerClient<config_loggerGetPayload<T>>>

    /**
     * Count the number of Config_loggers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {config_loggerCountArgs} args - Arguments to filter Config_loggers to count.
     * @example
     * // Count the number of Config_loggers
     * const count = await prisma.config_logger.count({
     *   where: {
     *     // ... the filter for the Config_loggers we want to count
     *   }
     * })
    **/
    count<T extends config_loggerCountArgs>(
      args?: Subset<T, config_loggerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Config_loggerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Config_logger.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Config_loggerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Config_loggerAggregateArgs>(args: Subset<T, Config_loggerAggregateArgs>): PrismaPromise<GetConfig_loggerAggregateType<T>>

    /**
     * Group by Config_logger.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Config_loggerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Config_loggerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Config_loggerGroupByArgs['orderBy'] }
        : { orderBy?: Config_loggerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Config_loggerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConfig_loggerGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for config_logger.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__config_loggerClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * config_logger findUnique
   */
  export type config_loggerFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the config_logger
     * 
    **/
    select?: config_loggerSelect | null
    /**
     * Throw an Error if a config_logger can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which config_logger to fetch.
     * 
    **/
    where: config_loggerWhereUniqueInput
  }


  /**
   * config_logger findFirst
   */
  export type config_loggerFindFirstArgs = {
    /**
     * Select specific fields to fetch from the config_logger
     * 
    **/
    select?: config_loggerSelect | null
    /**
     * Throw an Error if a config_logger can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which config_logger to fetch.
     * 
    **/
    where?: config_loggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of config_loggers to fetch.
     * 
    **/
    orderBy?: Enumerable<config_loggerOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for config_loggers.
     * 
    **/
    cursor?: config_loggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` config_loggers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` config_loggers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of config_loggers.
     * 
    **/
    distinct?: Enumerable<Config_loggerScalarFieldEnum>
  }


  /**
   * config_logger findMany
   */
  export type config_loggerFindManyArgs = {
    /**
     * Select specific fields to fetch from the config_logger
     * 
    **/
    select?: config_loggerSelect | null
    /**
     * Filter, which config_loggers to fetch.
     * 
    **/
    where?: config_loggerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of config_loggers to fetch.
     * 
    **/
    orderBy?: Enumerable<config_loggerOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing config_loggers.
     * 
    **/
    cursor?: config_loggerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` config_loggers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` config_loggers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Config_loggerScalarFieldEnum>
  }


  /**
   * config_logger create
   */
  export type config_loggerCreateArgs = {
    /**
     * Select specific fields to fetch from the config_logger
     * 
    **/
    select?: config_loggerSelect | null
    /**
     * The data needed to create a config_logger.
     * 
    **/
    data: XOR<config_loggerCreateInput, config_loggerUncheckedCreateInput>
  }


  /**
   * config_logger createMany
   */
  export type config_loggerCreateManyArgs = {
    data: Enumerable<config_loggerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * config_logger update
   */
  export type config_loggerUpdateArgs = {
    /**
     * Select specific fields to fetch from the config_logger
     * 
    **/
    select?: config_loggerSelect | null
    /**
     * The data needed to update a config_logger.
     * 
    **/
    data: XOR<config_loggerUpdateInput, config_loggerUncheckedUpdateInput>
    /**
     * Choose, which config_logger to update.
     * 
    **/
    where: config_loggerWhereUniqueInput
  }


  /**
   * config_logger updateMany
   */
  export type config_loggerUpdateManyArgs = {
    data: XOR<config_loggerUpdateManyMutationInput, config_loggerUncheckedUpdateManyInput>
    where?: config_loggerWhereInput
  }


  /**
   * config_logger upsert
   */
  export type config_loggerUpsertArgs = {
    /**
     * Select specific fields to fetch from the config_logger
     * 
    **/
    select?: config_loggerSelect | null
    /**
     * The filter to search for the config_logger to update in case it exists.
     * 
    **/
    where: config_loggerWhereUniqueInput
    /**
     * In case the config_logger found by the `where` argument doesn't exist, create a new config_logger with this data.
     * 
    **/
    create: XOR<config_loggerCreateInput, config_loggerUncheckedCreateInput>
    /**
     * In case the config_logger was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<config_loggerUpdateInput, config_loggerUncheckedUpdateInput>
  }


  /**
   * config_logger delete
   */
  export type config_loggerDeleteArgs = {
    /**
     * Select specific fields to fetch from the config_logger
     * 
    **/
    select?: config_loggerSelect | null
    /**
     * Filter which config_logger to delete.
     * 
    **/
    where: config_loggerWhereUniqueInput
  }


  /**
   * config_logger deleteMany
   */
  export type config_loggerDeleteManyArgs = {
    where?: config_loggerWhereInput
  }


  /**
   * config_logger without action
   */
  export type config_loggerArgs = {
    /**
     * Select specific fields to fetch from the config_logger
     * 
    **/
    select?: config_loggerSelect | null
  }



  /**
   * Model compare_temporary
   */


  export type AggregateCompare_temporary = {
    _count: Compare_temporaryCountAggregateOutputType | null
    count: Compare_temporaryCountAggregateOutputType | null
    _avg: Compare_temporaryAvgAggregateOutputType | null
    avg: Compare_temporaryAvgAggregateOutputType | null
    _sum: Compare_temporarySumAggregateOutputType | null
    sum: Compare_temporarySumAggregateOutputType | null
    _min: Compare_temporaryMinAggregateOutputType | null
    min: Compare_temporaryMinAggregateOutputType | null
    _max: Compare_temporaryMaxAggregateOutputType | null
    max: Compare_temporaryMaxAggregateOutputType | null
  }

  export type Compare_temporaryAvgAggregateOutputType = {
    id: number | null
    config: number | null
  }

  export type Compare_temporarySumAggregateOutputType = {
    id: number | null
    config: number | null
  }

  export type Compare_temporaryMinAggregateOutputType = {
    id: number | null
    config: number | null
  }

  export type Compare_temporaryMaxAggregateOutputType = {
    id: number | null
    config: number | null
  }

  export type Compare_temporaryCountAggregateOutputType = {
    id: number
    config: number
    _all: number
  }


  export type Compare_temporaryAvgAggregateInputType = {
    id?: true
    config?: true
  }

  export type Compare_temporarySumAggregateInputType = {
    id?: true
    config?: true
  }

  export type Compare_temporaryMinAggregateInputType = {
    id?: true
    config?: true
  }

  export type Compare_temporaryMaxAggregateInputType = {
    id?: true
    config?: true
  }

  export type Compare_temporaryCountAggregateInputType = {
    id?: true
    config?: true
    _all?: true
  }

  export type Compare_temporaryAggregateArgs = {
    /**
     * Filter which compare_temporary to aggregate.
     * 
    **/
    where?: compare_temporaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compare_temporaries to fetch.
     * 
    **/
    orderBy?: Enumerable<compare_temporaryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: compare_temporaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compare_temporaries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compare_temporaries.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned compare_temporaries
    **/
    _count?: true | Compare_temporaryCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | Compare_temporaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Compare_temporaryAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: Compare_temporaryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Compare_temporarySumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: Compare_temporarySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Compare_temporaryMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: Compare_temporaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Compare_temporaryMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: Compare_temporaryMaxAggregateInputType
  }

  export type GetCompare_temporaryAggregateType<T extends Compare_temporaryAggregateArgs> = {
        [P in keyof T & keyof AggregateCompare_temporary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompare_temporary[P]>
      : GetScalarType<T[P], AggregateCompare_temporary[P]>
  }


    
    
  export type Compare_temporaryGroupByArgs = {
    where?: compare_temporaryWhereInput
    orderBy?: Enumerable<compare_temporaryOrderByInput>
    by: Array<Compare_temporaryScalarFieldEnum>
    having?: compare_temporaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Compare_temporaryCountAggregateInputType | true
    _avg?: Compare_temporaryAvgAggregateInputType
    _sum?: Compare_temporarySumAggregateInputType
    _min?: Compare_temporaryMinAggregateInputType
    _max?: Compare_temporaryMaxAggregateInputType
  }


  export type Compare_temporaryGroupByOutputType = {
    id: number
    config: number
    _count: Compare_temporaryCountAggregateOutputType | null
    _avg: Compare_temporaryAvgAggregateOutputType | null
    _sum: Compare_temporarySumAggregateOutputType | null
    _min: Compare_temporaryMinAggregateOutputType | null
    _max: Compare_temporaryMaxAggregateOutputType | null
  }

  type GetCompare_temporaryGroupByPayload<T extends Compare_temporaryGroupByArgs> = Promise<
    Array<
      PickArray<Compare_temporaryGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Compare_temporaryGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Compare_temporaryGroupByOutputType[P]> 
            : GetScalarType<T[P], Compare_temporaryGroupByOutputType[P]>
        }
      > 
    >


  export type compare_temporarySelect = {
    id?: boolean
    config?: boolean
  }

  export type compare_temporaryGetPayload<
    S extends boolean | null | undefined | compare_temporaryArgs,
    U = keyof S
      > = S extends true
        ? compare_temporary
    : S extends undefined
    ? never
    : S extends compare_temporaryArgs | compare_temporaryFindManyArgs
    ?'include' extends U
    ? compare_temporary 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof compare_temporary ?compare_temporary [P]
  : 
     never
  } 
    : compare_temporary
  : compare_temporary


  type compare_temporaryCountArgs = Merge<
    Omit<compare_temporaryFindManyArgs, 'select' | 'include'> & {
      select?: Compare_temporaryCountAggregateInputType | true
    }
  >

  export interface compare_temporaryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Compare_temporary that matches the filter.
     * @param {compare_temporaryFindUniqueArgs} args - Arguments to find a Compare_temporary
     * @example
     * // Get one Compare_temporary
     * const compare_temporary = await prisma.compare_temporary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends compare_temporaryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, compare_temporaryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'compare_temporary'> extends True ? CheckSelect<T, Prisma__compare_temporaryClient<compare_temporary>, Prisma__compare_temporaryClient<compare_temporaryGetPayload<T>>> : CheckSelect<T, Prisma__compare_temporaryClient<compare_temporary | null >, Prisma__compare_temporaryClient<compare_temporaryGetPayload<T> | null >>

    /**
     * Find the first Compare_temporary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compare_temporaryFindFirstArgs} args - Arguments to find a Compare_temporary
     * @example
     * // Get one Compare_temporary
     * const compare_temporary = await prisma.compare_temporary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends compare_temporaryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, compare_temporaryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'compare_temporary'> extends True ? CheckSelect<T, Prisma__compare_temporaryClient<compare_temporary>, Prisma__compare_temporaryClient<compare_temporaryGetPayload<T>>> : CheckSelect<T, Prisma__compare_temporaryClient<compare_temporary | null >, Prisma__compare_temporaryClient<compare_temporaryGetPayload<T> | null >>

    /**
     * Find zero or more Compare_temporaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compare_temporaryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compare_temporaries
     * const compare_temporaries = await prisma.compare_temporary.findMany()
     * 
     * // Get first 10 Compare_temporaries
     * const compare_temporaries = await prisma.compare_temporary.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compare_temporaryWithIdOnly = await prisma.compare_temporary.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends compare_temporaryFindManyArgs>(
      args?: SelectSubset<T, compare_temporaryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<compare_temporary>>, PrismaPromise<Array<compare_temporaryGetPayload<T>>>>

    /**
     * Create a Compare_temporary.
     * @param {compare_temporaryCreateArgs} args - Arguments to create a Compare_temporary.
     * @example
     * // Create one Compare_temporary
     * const Compare_temporary = await prisma.compare_temporary.create({
     *   data: {
     *     // ... data to create a Compare_temporary
     *   }
     * })
     * 
    **/
    create<T extends compare_temporaryCreateArgs>(
      args: SelectSubset<T, compare_temporaryCreateArgs>
    ): CheckSelect<T, Prisma__compare_temporaryClient<compare_temporary>, Prisma__compare_temporaryClient<compare_temporaryGetPayload<T>>>

    /**
     * Create many Compare_temporaries.
     *     @param {compare_temporaryCreateManyArgs} args - Arguments to create many Compare_temporaries.
     *     @example
     *     // Create many Compare_temporaries
     *     const compare_temporary = await prisma.compare_temporary.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends compare_temporaryCreateManyArgs>(
      args?: SelectSubset<T, compare_temporaryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Compare_temporary.
     * @param {compare_temporaryDeleteArgs} args - Arguments to delete one Compare_temporary.
     * @example
     * // Delete one Compare_temporary
     * const Compare_temporary = await prisma.compare_temporary.delete({
     *   where: {
     *     // ... filter to delete one Compare_temporary
     *   }
     * })
     * 
    **/
    delete<T extends compare_temporaryDeleteArgs>(
      args: SelectSubset<T, compare_temporaryDeleteArgs>
    ): CheckSelect<T, Prisma__compare_temporaryClient<compare_temporary>, Prisma__compare_temporaryClient<compare_temporaryGetPayload<T>>>

    /**
     * Update one Compare_temporary.
     * @param {compare_temporaryUpdateArgs} args - Arguments to update one Compare_temporary.
     * @example
     * // Update one Compare_temporary
     * const compare_temporary = await prisma.compare_temporary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends compare_temporaryUpdateArgs>(
      args: SelectSubset<T, compare_temporaryUpdateArgs>
    ): CheckSelect<T, Prisma__compare_temporaryClient<compare_temporary>, Prisma__compare_temporaryClient<compare_temporaryGetPayload<T>>>

    /**
     * Delete zero or more Compare_temporaries.
     * @param {compare_temporaryDeleteManyArgs} args - Arguments to filter Compare_temporaries to delete.
     * @example
     * // Delete a few Compare_temporaries
     * const { count } = await prisma.compare_temporary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends compare_temporaryDeleteManyArgs>(
      args?: SelectSubset<T, compare_temporaryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compare_temporaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compare_temporaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compare_temporaries
     * const compare_temporary = await prisma.compare_temporary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends compare_temporaryUpdateManyArgs>(
      args: SelectSubset<T, compare_temporaryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Compare_temporary.
     * @param {compare_temporaryUpsertArgs} args - Arguments to update or create a Compare_temporary.
     * @example
     * // Update or create a Compare_temporary
     * const compare_temporary = await prisma.compare_temporary.upsert({
     *   create: {
     *     // ... data to create a Compare_temporary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compare_temporary we want to update
     *   }
     * })
    **/
    upsert<T extends compare_temporaryUpsertArgs>(
      args: SelectSubset<T, compare_temporaryUpsertArgs>
    ): CheckSelect<T, Prisma__compare_temporaryClient<compare_temporary>, Prisma__compare_temporaryClient<compare_temporaryGetPayload<T>>>

    /**
     * Count the number of Compare_temporaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compare_temporaryCountArgs} args - Arguments to filter Compare_temporaries to count.
     * @example
     * // Count the number of Compare_temporaries
     * const count = await prisma.compare_temporary.count({
     *   where: {
     *     // ... the filter for the Compare_temporaries we want to count
     *   }
     * })
    **/
    count<T extends compare_temporaryCountArgs>(
      args?: Subset<T, compare_temporaryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Compare_temporaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compare_temporary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compare_temporaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Compare_temporaryAggregateArgs>(args: Subset<T, Compare_temporaryAggregateArgs>): PrismaPromise<GetCompare_temporaryAggregateType<T>>

    /**
     * Group by Compare_temporary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compare_temporaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Compare_temporaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Compare_temporaryGroupByArgs['orderBy'] }
        : { orderBy?: Compare_temporaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Compare_temporaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompare_temporaryGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for compare_temporary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__compare_temporaryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * compare_temporary findUnique
   */
  export type compare_temporaryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the compare_temporary
     * 
    **/
    select?: compare_temporarySelect | null
    /**
     * Throw an Error if a compare_temporary can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which compare_temporary to fetch.
     * 
    **/
    where: compare_temporaryWhereUniqueInput
  }


  /**
   * compare_temporary findFirst
   */
  export type compare_temporaryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the compare_temporary
     * 
    **/
    select?: compare_temporarySelect | null
    /**
     * Throw an Error if a compare_temporary can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which compare_temporary to fetch.
     * 
    **/
    where?: compare_temporaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compare_temporaries to fetch.
     * 
    **/
    orderBy?: Enumerable<compare_temporaryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for compare_temporaries.
     * 
    **/
    cursor?: compare_temporaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compare_temporaries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compare_temporaries.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of compare_temporaries.
     * 
    **/
    distinct?: Enumerable<Compare_temporaryScalarFieldEnum>
  }


  /**
   * compare_temporary findMany
   */
  export type compare_temporaryFindManyArgs = {
    /**
     * Select specific fields to fetch from the compare_temporary
     * 
    **/
    select?: compare_temporarySelect | null
    /**
     * Filter, which compare_temporaries to fetch.
     * 
    **/
    where?: compare_temporaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compare_temporaries to fetch.
     * 
    **/
    orderBy?: Enumerable<compare_temporaryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing compare_temporaries.
     * 
    **/
    cursor?: compare_temporaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compare_temporaries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compare_temporaries.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Compare_temporaryScalarFieldEnum>
  }


  /**
   * compare_temporary create
   */
  export type compare_temporaryCreateArgs = {
    /**
     * Select specific fields to fetch from the compare_temporary
     * 
    **/
    select?: compare_temporarySelect | null
    /**
     * The data needed to create a compare_temporary.
     * 
    **/
    data: XOR<compare_temporaryCreateInput, compare_temporaryUncheckedCreateInput>
  }


  /**
   * compare_temporary createMany
   */
  export type compare_temporaryCreateManyArgs = {
    data: Enumerable<compare_temporaryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * compare_temporary update
   */
  export type compare_temporaryUpdateArgs = {
    /**
     * Select specific fields to fetch from the compare_temporary
     * 
    **/
    select?: compare_temporarySelect | null
    /**
     * The data needed to update a compare_temporary.
     * 
    **/
    data: XOR<compare_temporaryUpdateInput, compare_temporaryUncheckedUpdateInput>
    /**
     * Choose, which compare_temporary to update.
     * 
    **/
    where: compare_temporaryWhereUniqueInput
  }


  /**
   * compare_temporary updateMany
   */
  export type compare_temporaryUpdateManyArgs = {
    data: XOR<compare_temporaryUpdateManyMutationInput, compare_temporaryUncheckedUpdateManyInput>
    where?: compare_temporaryWhereInput
  }


  /**
   * compare_temporary upsert
   */
  export type compare_temporaryUpsertArgs = {
    /**
     * Select specific fields to fetch from the compare_temporary
     * 
    **/
    select?: compare_temporarySelect | null
    /**
     * The filter to search for the compare_temporary to update in case it exists.
     * 
    **/
    where: compare_temporaryWhereUniqueInput
    /**
     * In case the compare_temporary found by the `where` argument doesn't exist, create a new compare_temporary with this data.
     * 
    **/
    create: XOR<compare_temporaryCreateInput, compare_temporaryUncheckedCreateInput>
    /**
     * In case the compare_temporary was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<compare_temporaryUpdateInput, compare_temporaryUncheckedUpdateInput>
  }


  /**
   * compare_temporary delete
   */
  export type compare_temporaryDeleteArgs = {
    /**
     * Select specific fields to fetch from the compare_temporary
     * 
    **/
    select?: compare_temporarySelect | null
    /**
     * Filter which compare_temporary to delete.
     * 
    **/
    where: compare_temporaryWhereUniqueInput
  }


  /**
   * compare_temporary deleteMany
   */
  export type compare_temporaryDeleteManyArgs = {
    where?: compare_temporaryWhereInput
  }


  /**
   * compare_temporary without action
   */
  export type compare_temporaryArgs = {
    /**
     * Select specific fields to fetch from the compare_temporary
     * 
    **/
    select?: compare_temporarySelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ClientsScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    institution: 'institution',
    department: 'department',
    position: 'position',
    name: 'name',
    institutionKey: 'institutionKey',
    dbIP: 'dbIP',
    dbType: 'dbType',
    dbPort: 'dbPort',
    dbID: 'dbID',
    dbPW: 'dbPW'
  };

  export type ClientsScalarFieldEnum = (typeof ClientsScalarFieldEnum)[keyof typeof ClientsScalarFieldEnum]


  export const ConfigsScalarFieldEnum: {
    id: 'id',
    endpoint: 'endpoint',
    data_type: 'data_type',
    client_key: 'client_key',
    password: 'password',
    term: 'term',
    crontab: 'crontab',
    jobname: 'jobname',
    username: 'username',
    action: 'action',
    toggle: 'toggle'
  };

  export type ConfigsScalarFieldEnum = (typeof ConfigsScalarFieldEnum)[keyof typeof ConfigsScalarFieldEnum]


  export const Config_loggerScalarFieldEnum: {
    id: 'id',
    time: 'time',
    status: 'status',
    message: 'message'
  };

  export type Config_loggerScalarFieldEnum = (typeof Config_loggerScalarFieldEnum)[keyof typeof Config_loggerScalarFieldEnum]


  export const Compare_temporaryScalarFieldEnum: {
    id: 'id',
    config: 'config'
  };

  export type Compare_temporaryScalarFieldEnum = (typeof Compare_temporaryScalarFieldEnum)[keyof typeof Compare_temporaryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type clientsWhereInput = {
    AND?: Enumerable<clientsWhereInput>
    OR?: Enumerable<clientsWhereInput>
    NOT?: Enumerable<clientsWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
    institution?: StringFilter | string
    department?: StringFilter | string
    position?: StringFilter | string
    name?: StringFilter | string
    institutionKey?: StringFilter | string
    dbIP?: StringNullableFilter | string | null
    dbType?: StringNullableFilter | string | null
    dbPort?: IntNullableFilter | number | null
    dbID?: StringNullableFilter | string | null
    dbPW?: StringNullableFilter | string | null
    configs?: ConfigsListRelationFilter
  }

  export type clientsOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    institution?: SortOrder
    department?: SortOrder
    position?: SortOrder
    name?: SortOrder
    institutionKey?: SortOrder
    dbIP?: SortOrder
    dbType?: SortOrder
    dbPort?: SortOrder
    dbID?: SortOrder
    dbPW?: SortOrder
  }

  export type clientsWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type clientsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<clientsScalarWhereWithAggregatesInput>
    OR?: Enumerable<clientsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<clientsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    institution?: StringWithAggregatesFilter | string
    department?: StringWithAggregatesFilter | string
    position?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    institutionKey?: StringWithAggregatesFilter | string
    dbIP?: StringNullableWithAggregatesFilter | string | null
    dbType?: StringNullableWithAggregatesFilter | string | null
    dbPort?: IntNullableWithAggregatesFilter | number | null
    dbID?: StringNullableWithAggregatesFilter | string | null
    dbPW?: StringNullableWithAggregatesFilter | string | null
  }

  export type configsWhereInput = {
    AND?: Enumerable<configsWhereInput>
    OR?: Enumerable<configsWhereInput>
    NOT?: Enumerable<configsWhereInput>
    id?: IntFilter | number
    endpoint?: StringNullableFilter | string | null
    data_type?: StringNullableFilter | string | null
    client_key?: IntFilter | number
    password?: StringNullableFilter | string | null
    term?: StringNullableFilter | string | null
    crontab?: StringNullableFilter | string | null
    jobname?: StringNullableFilter | string | null
    username?: StringNullableFilter | string | null
    action?: StringNullableFilter | string | null
    toggle?: IntNullableFilter | number | null
    clients?: XOR<ClientsRelationFilter, clientsWhereInput>
  }

  export type configsOrderByInput = {
    id?: SortOrder
    endpoint?: SortOrder
    data_type?: SortOrder
    client_key?: SortOrder
    password?: SortOrder
    term?: SortOrder
    crontab?: SortOrder
    jobname?: SortOrder
    username?: SortOrder
    action?: SortOrder
    toggle?: SortOrder
  }

  export type configsWhereUniqueInput = {
    id?: number
  }

  export type configsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<configsScalarWhereWithAggregatesInput>
    OR?: Enumerable<configsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<configsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    endpoint?: StringNullableWithAggregatesFilter | string | null
    data_type?: StringNullableWithAggregatesFilter | string | null
    client_key?: IntWithAggregatesFilter | number
    password?: StringNullableWithAggregatesFilter | string | null
    term?: StringNullableWithAggregatesFilter | string | null
    crontab?: StringNullableWithAggregatesFilter | string | null
    jobname?: StringNullableWithAggregatesFilter | string | null
    username?: StringNullableWithAggregatesFilter | string | null
    action?: StringNullableWithAggregatesFilter | string | null
    toggle?: IntNullableWithAggregatesFilter | number | null
  }

  export type config_loggerWhereInput = {
    AND?: Enumerable<config_loggerWhereInput>
    OR?: Enumerable<config_loggerWhereInput>
    NOT?: Enumerable<config_loggerWhereInput>
    id?: IntFilter | number
    time?: DateTimeFilter | Date | string
    status?: StringFilter | string
    message?: StringFilter | string
  }

  export type config_loggerOrderByInput = {
    id?: SortOrder
    time?: SortOrder
    status?: SortOrder
    message?: SortOrder
  }

  export type config_loggerWhereUniqueInput = {
    id?: number
  }

  export type config_loggerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<config_loggerScalarWhereWithAggregatesInput>
    OR?: Enumerable<config_loggerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<config_loggerScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    time?: DateTimeWithAggregatesFilter | Date | string
    status?: StringWithAggregatesFilter | string
    message?: StringWithAggregatesFilter | string
  }

  export type compare_temporaryWhereInput = {
    AND?: Enumerable<compare_temporaryWhereInput>
    OR?: Enumerable<compare_temporaryWhereInput>
    NOT?: Enumerable<compare_temporaryWhereInput>
    id?: IntFilter | number
    config?: IntFilter | number
  }

  export type compare_temporaryOrderByInput = {
    id?: SortOrder
    config?: SortOrder
  }

  export type compare_temporaryWhereUniqueInput = {
    id?: number
  }

  export type compare_temporaryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<compare_temporaryScalarWhereWithAggregatesInput>
    OR?: Enumerable<compare_temporaryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<compare_temporaryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    config?: IntWithAggregatesFilter | number
  }

  export type clientsCreateInput = {
    email: string
    password: string
    institution: string
    department: string
    position: string
    name: string
    institutionKey: string
    dbIP?: string | null
    dbType?: string | null
    dbPort?: number | null
    dbID?: string | null
    dbPW?: string | null
    configs?: configsCreateNestedManyWithoutClientsInput
  }

  export type clientsUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    institution: string
    department: string
    position: string
    name: string
    institutionKey: string
    dbIP?: string | null
    dbType?: string | null
    dbPort?: number | null
    dbID?: string | null
    dbPW?: string | null
    configs?: configsUncheckedCreateNestedManyWithoutClientsInput
  }

  export type clientsUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    institutionKey?: StringFieldUpdateOperationsInput | string
    dbIP?: NullableStringFieldUpdateOperationsInput | string | null
    dbType?: NullableStringFieldUpdateOperationsInput | string | null
    dbPort?: NullableIntFieldUpdateOperationsInput | number | null
    dbID?: NullableStringFieldUpdateOperationsInput | string | null
    dbPW?: NullableStringFieldUpdateOperationsInput | string | null
    configs?: configsUpdateManyWithoutClientsInput
  }

  export type clientsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    institutionKey?: StringFieldUpdateOperationsInput | string
    dbIP?: NullableStringFieldUpdateOperationsInput | string | null
    dbType?: NullableStringFieldUpdateOperationsInput | string | null
    dbPort?: NullableIntFieldUpdateOperationsInput | number | null
    dbID?: NullableStringFieldUpdateOperationsInput | string | null
    dbPW?: NullableStringFieldUpdateOperationsInput | string | null
    configs?: configsUncheckedUpdateManyWithoutClientsInput
  }

  export type clientsCreateManyInput = {
    id?: number
    email: string
    password: string
    institution: string
    department: string
    position: string
    name: string
    institutionKey: string
    dbIP?: string | null
    dbType?: string | null
    dbPort?: number | null
    dbID?: string | null
    dbPW?: string | null
  }

  export type clientsUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    institutionKey?: StringFieldUpdateOperationsInput | string
    dbIP?: NullableStringFieldUpdateOperationsInput | string | null
    dbType?: NullableStringFieldUpdateOperationsInput | string | null
    dbPort?: NullableIntFieldUpdateOperationsInput | number | null
    dbID?: NullableStringFieldUpdateOperationsInput | string | null
    dbPW?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clientsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    institutionKey?: StringFieldUpdateOperationsInput | string
    dbIP?: NullableStringFieldUpdateOperationsInput | string | null
    dbType?: NullableStringFieldUpdateOperationsInput | string | null
    dbPort?: NullableIntFieldUpdateOperationsInput | number | null
    dbID?: NullableStringFieldUpdateOperationsInput | string | null
    dbPW?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type configsCreateInput = {
    endpoint?: string | null
    data_type?: string | null
    password?: string | null
    term?: string | null
    crontab?: string | null
    jobname?: string | null
    username?: string | null
    action?: string | null
    toggle?: number | null
    clients: clientsCreateNestedOneWithoutConfigsInput
  }

  export type configsUncheckedCreateInput = {
    id?: number
    endpoint?: string | null
    data_type?: string | null
    client_key: number
    password?: string | null
    term?: string | null
    crontab?: string | null
    jobname?: string | null
    username?: string | null
    action?: string | null
    toggle?: number | null
  }

  export type configsUpdateInput = {
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    data_type?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    crontab?: NullableStringFieldUpdateOperationsInput | string | null
    jobname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    action?: NullableStringFieldUpdateOperationsInput | string | null
    toggle?: NullableIntFieldUpdateOperationsInput | number | null
    clients?: clientsUpdateOneRequiredWithoutConfigsInput
  }

  export type configsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    data_type?: NullableStringFieldUpdateOperationsInput | string | null
    client_key?: IntFieldUpdateOperationsInput | number
    password?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    crontab?: NullableStringFieldUpdateOperationsInput | string | null
    jobname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    action?: NullableStringFieldUpdateOperationsInput | string | null
    toggle?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type configsCreateManyInput = {
    id?: number
    endpoint?: string | null
    data_type?: string | null
    client_key: number
    password?: string | null
    term?: string | null
    crontab?: string | null
    jobname?: string | null
    username?: string | null
    action?: string | null
    toggle?: number | null
  }

  export type configsUpdateManyMutationInput = {
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    data_type?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    crontab?: NullableStringFieldUpdateOperationsInput | string | null
    jobname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    action?: NullableStringFieldUpdateOperationsInput | string | null
    toggle?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type configsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    data_type?: NullableStringFieldUpdateOperationsInput | string | null
    client_key?: IntFieldUpdateOperationsInput | number
    password?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    crontab?: NullableStringFieldUpdateOperationsInput | string | null
    jobname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    action?: NullableStringFieldUpdateOperationsInput | string | null
    toggle?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type config_loggerCreateInput = {
    time: Date | string
    status: string
    message: string
  }

  export type config_loggerUncheckedCreateInput = {
    id?: number
    time: Date | string
    status: string
    message: string
  }

  export type config_loggerUpdateInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type config_loggerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type config_loggerCreateManyInput = {
    id?: number
    time: Date | string
    status: string
    message: string
  }

  export type config_loggerUpdateManyMutationInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type config_loggerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type compare_temporaryCreateInput = {
    config: number
  }

  export type compare_temporaryUncheckedCreateInput = {
    id?: number
    config: number
  }

  export type compare_temporaryUpdateInput = {
    config?: IntFieldUpdateOperationsInput | number
  }

  export type compare_temporaryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    config?: IntFieldUpdateOperationsInput | number
  }

  export type compare_temporaryCreateManyInput = {
    id?: number
    config: number
  }

  export type compare_temporaryUpdateManyMutationInput = {
    config?: IntFieldUpdateOperationsInput | number
  }

  export type compare_temporaryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    config?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type ConfigsListRelationFilter = {
    every?: configsWhereInput
    some?: configsWhereInput
    none?: configsWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type ClientsRelationFilter = {
    is?: clientsWhereInput
    isNot?: clientsWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type configsCreateNestedManyWithoutClientsInput = {
    create?: XOR<Enumerable<configsCreateWithoutClientsInput>, Enumerable<configsUncheckedCreateWithoutClientsInput>>
    connectOrCreate?: Enumerable<configsCreateOrConnectWithoutClientsInput>
    createMany?: configsCreateManyClientsInputEnvelope
    connect?: Enumerable<configsWhereUniqueInput>
  }

  export type configsUncheckedCreateNestedManyWithoutClientsInput = {
    create?: XOR<Enumerable<configsCreateWithoutClientsInput>, Enumerable<configsUncheckedCreateWithoutClientsInput>>
    connectOrCreate?: Enumerable<configsCreateOrConnectWithoutClientsInput>
    createMany?: configsCreateManyClientsInputEnvelope
    connect?: Enumerable<configsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type configsUpdateManyWithoutClientsInput = {
    create?: XOR<Enumerable<configsCreateWithoutClientsInput>, Enumerable<configsUncheckedCreateWithoutClientsInput>>
    connectOrCreate?: Enumerable<configsCreateOrConnectWithoutClientsInput>
    upsert?: Enumerable<configsUpsertWithWhereUniqueWithoutClientsInput>
    createMany?: configsCreateManyClientsInputEnvelope
    connect?: Enumerable<configsWhereUniqueInput>
    set?: Enumerable<configsWhereUniqueInput>
    disconnect?: Enumerable<configsWhereUniqueInput>
    delete?: Enumerable<configsWhereUniqueInput>
    update?: Enumerable<configsUpdateWithWhereUniqueWithoutClientsInput>
    updateMany?: Enumerable<configsUpdateManyWithWhereWithoutClientsInput>
    deleteMany?: Enumerable<configsScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type configsUncheckedUpdateManyWithoutClientsInput = {
    create?: XOR<Enumerable<configsCreateWithoutClientsInput>, Enumerable<configsUncheckedCreateWithoutClientsInput>>
    connectOrCreate?: Enumerable<configsCreateOrConnectWithoutClientsInput>
    upsert?: Enumerable<configsUpsertWithWhereUniqueWithoutClientsInput>
    createMany?: configsCreateManyClientsInputEnvelope
    connect?: Enumerable<configsWhereUniqueInput>
    set?: Enumerable<configsWhereUniqueInput>
    disconnect?: Enumerable<configsWhereUniqueInput>
    delete?: Enumerable<configsWhereUniqueInput>
    update?: Enumerable<configsUpdateWithWhereUniqueWithoutClientsInput>
    updateMany?: Enumerable<configsUpdateManyWithWhereWithoutClientsInput>
    deleteMany?: Enumerable<configsScalarWhereInput>
  }

  export type clientsCreateNestedOneWithoutConfigsInput = {
    create?: XOR<clientsCreateWithoutConfigsInput, clientsUncheckedCreateWithoutConfigsInput>
    connectOrCreate?: clientsCreateOrConnectWithoutConfigsInput
    connect?: clientsWhereUniqueInput
  }

  export type clientsUpdateOneRequiredWithoutConfigsInput = {
    create?: XOR<clientsCreateWithoutConfigsInput, clientsUncheckedCreateWithoutConfigsInput>
    connectOrCreate?: clientsCreateOrConnectWithoutConfigsInput
    upsert?: clientsUpsertWithoutConfigsInput
    connect?: clientsWhereUniqueInput
    update?: XOR<clientsUpdateWithoutConfigsInput, clientsUncheckedUpdateWithoutConfigsInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type configsCreateWithoutClientsInput = {
    endpoint?: string | null
    data_type?: string | null
    password?: string | null
    term?: string | null
    crontab?: string | null
    jobname?: string | null
    username?: string | null
    action?: string | null
    toggle?: number | null
  }

  export type configsUncheckedCreateWithoutClientsInput = {
    id?: number
    endpoint?: string | null
    data_type?: string | null
    password?: string | null
    term?: string | null
    crontab?: string | null
    jobname?: string | null
    username?: string | null
    action?: string | null
    toggle?: number | null
  }

  export type configsCreateOrConnectWithoutClientsInput = {
    where: configsWhereUniqueInput
    create: XOR<configsCreateWithoutClientsInput, configsUncheckedCreateWithoutClientsInput>
  }

  export type configsCreateManyClientsInputEnvelope = {
    data: Enumerable<configsCreateManyClientsInput>
    skipDuplicates?: boolean
  }

  export type configsUpsertWithWhereUniqueWithoutClientsInput = {
    where: configsWhereUniqueInput
    update: XOR<configsUpdateWithoutClientsInput, configsUncheckedUpdateWithoutClientsInput>
    create: XOR<configsCreateWithoutClientsInput, configsUncheckedCreateWithoutClientsInput>
  }

  export type configsUpdateWithWhereUniqueWithoutClientsInput = {
    where: configsWhereUniqueInput
    data: XOR<configsUpdateWithoutClientsInput, configsUncheckedUpdateWithoutClientsInput>
  }

  export type configsUpdateManyWithWhereWithoutClientsInput = {
    where: configsScalarWhereInput
    data: XOR<configsUpdateManyMutationInput, configsUncheckedUpdateManyWithoutConfigsInput>
  }

  export type configsScalarWhereInput = {
    AND?: Enumerable<configsScalarWhereInput>
    OR?: Enumerable<configsScalarWhereInput>
    NOT?: Enumerable<configsScalarWhereInput>
    id?: IntFilter | number
    endpoint?: StringNullableFilter | string | null
    data_type?: StringNullableFilter | string | null
    client_key?: IntFilter | number
    password?: StringNullableFilter | string | null
    term?: StringNullableFilter | string | null
    crontab?: StringNullableFilter | string | null
    jobname?: StringNullableFilter | string | null
    username?: StringNullableFilter | string | null
    action?: StringNullableFilter | string | null
    toggle?: IntNullableFilter | number | null
  }

  export type clientsCreateWithoutConfigsInput = {
    email: string
    password: string
    institution: string
    department: string
    position: string
    name: string
    institutionKey: string
    dbIP?: string | null
    dbType?: string | null
    dbPort?: number | null
    dbID?: string | null
    dbPW?: string | null
  }

  export type clientsUncheckedCreateWithoutConfigsInput = {
    id?: number
    email: string
    password: string
    institution: string
    department: string
    position: string
    name: string
    institutionKey: string
    dbIP?: string | null
    dbType?: string | null
    dbPort?: number | null
    dbID?: string | null
    dbPW?: string | null
  }

  export type clientsCreateOrConnectWithoutConfigsInput = {
    where: clientsWhereUniqueInput
    create: XOR<clientsCreateWithoutConfigsInput, clientsUncheckedCreateWithoutConfigsInput>
  }

  export type clientsUpsertWithoutConfigsInput = {
    update: XOR<clientsUpdateWithoutConfigsInput, clientsUncheckedUpdateWithoutConfigsInput>
    create: XOR<clientsCreateWithoutConfigsInput, clientsUncheckedCreateWithoutConfigsInput>
  }

  export type clientsUpdateWithoutConfigsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    institutionKey?: StringFieldUpdateOperationsInput | string
    dbIP?: NullableStringFieldUpdateOperationsInput | string | null
    dbType?: NullableStringFieldUpdateOperationsInput | string | null
    dbPort?: NullableIntFieldUpdateOperationsInput | number | null
    dbID?: NullableStringFieldUpdateOperationsInput | string | null
    dbPW?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clientsUncheckedUpdateWithoutConfigsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    institutionKey?: StringFieldUpdateOperationsInput | string
    dbIP?: NullableStringFieldUpdateOperationsInput | string | null
    dbType?: NullableStringFieldUpdateOperationsInput | string | null
    dbPort?: NullableIntFieldUpdateOperationsInput | number | null
    dbID?: NullableStringFieldUpdateOperationsInput | string | null
    dbPW?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type configsCreateManyClientsInput = {
    id?: number
    endpoint?: string | null
    data_type?: string | null
    password?: string | null
    term?: string | null
    crontab?: string | null
    jobname?: string | null
    username?: string | null
    action?: string | null
    toggle?: number | null
  }

  export type configsUpdateWithoutClientsInput = {
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    data_type?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    crontab?: NullableStringFieldUpdateOperationsInput | string | null
    jobname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    action?: NullableStringFieldUpdateOperationsInput | string | null
    toggle?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type configsUncheckedUpdateWithoutClientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    data_type?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    crontab?: NullableStringFieldUpdateOperationsInput | string | null
    jobname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    action?: NullableStringFieldUpdateOperationsInput | string | null
    toggle?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type configsUncheckedUpdateManyWithoutConfigsInput = {
    id?: IntFieldUpdateOperationsInput | number
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    data_type?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    term?: NullableStringFieldUpdateOperationsInput | string | null
    crontab?: NullableStringFieldUpdateOperationsInput | string | null
    jobname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    action?: NullableStringFieldUpdateOperationsInput | string | null
    toggle?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}